@model TaskManager.Domain.ToDoTask

@{
    var panelBackgroundStyle = "";

    if (Model.IsComplete) {
        panelBackgroundStyle = "my-sucess-background";
    } else if (Model.DueTime < DateTime.Now) {
        panelBackgroundStyle = "my-overdue-background";
    } else {
        panelBackgroundStyle = "my-default-background";
    }
    
    <div class="panel panel-default @panelBackgroundStyle">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-2">
                    @{
                        var labelStyle = "";
    
                        switch (Model.TaskPriority)
                        {
                            case TaskManager.Domain.ToDoTask.Priority.Low: 
                                labelStyle = "success"; 
                                break;
                            case TaskManager.Domain.ToDoTask.Priority.Normal: 
                                labelStyle = "primary"; 
                                break;
                            case TaskManager.Domain.ToDoTask.Priority.High: 
                                labelStyle = "warning"; 
                                break;
                            default: 
                                throw new ArgumentException("Unexpected task priority");
                        }
                        <h4><span class="label label-@labelStyle pull-left">@Model.TaskPriority.ToString()</span></h4>
                    }
                </div>
                <div class="col-md-4">
                    <p class="text-center">
                        <span class="glyphicon glyphicon-time" />
                        <span class="due-time">
                            @string.Format("{0:D2}:{1:D2}", Model.DueTime.Hour, Model.DueTime.Minute)
                        </span>
                    </p>
                </div>
                <div class="col-md-5">
                    @Html.ActionLink(
                        linkText: Model.Title,
                        actionName: "Edit",
                        controllerName: "Tasks",
                        routeValues: new { taskId = Model.Id, returnUrl = Request.Url },
                        htmlAttributes: new { @class = "task-title text-center" 
                    })
                </div>
                
                <div class="col-md-1">
                    @if (!Model.IsComplete)
                    {
                        <div class="btn-group">
                        @using (@Html.BeginForm("MarkAsComplete", "Tasks"))
                        {
                            @Html.Hidden("taskId", Model.Id)
                            @Html.Hidden("returnUrl", Request.Url)

                            <button type="submit" class="btn btn-success btn-sm">
                                <div class="glyphicon glyphicon-ok"></div>
                            </button>
                        }
                    </div>
                    }
    
                    <div class="btn-group">
                        @using (@Html.BeginForm("Delete", "Tasks"))
                        {
                            @Html.Hidden("taskId", Model.Id)
                            @Html.Hidden("returnUrl", Request.Url)

                            <button type="submit" class="btn btn-danger btn-sm">
                                <div class="glyphicon glyphicon-remove"></div>
                            </button>
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>
}